#!/usr/bin/env php
<?php

require __DIR__ . '/support/autoload.php';

$argv = $_SERVER['argv'];
$command = $argv[1] ?? null;

switch ($command) {
    case 'make:controller':
        $name = $argv[2] ?? null;
        if (!$name) {
            echo "Type name of the controller.\n";
            exit(1);
        }
        if (!str_ends_with($name, 'Controller')) {
            $className = $name . 'Controller';
        } else {
            $className = $name;
        }

        $stub = file_get_contents(__DIR__ . '/support/create/controller.stub');
        $stub = str_replace('ClassName', $className, $stub);
    
        $outputPath = __DIR__ . "/app/Controllers/{$className}.php";
        if (file_exists($outputPath)) {
            echo "Controller already exists.\n";
            exit(1);
        }
    
        file_put_contents($outputPath, $stub);
        echo "Created controller: {$className}\n";
        break;
    case 'make:model':
        $name = $argv[2] ?? null;
        if (!$name) {
            echo "Type name of the model.\n";
            exit(1);
        }
        $table_name = strtolower($name);
        $stub = file_get_contents(__DIR__ . '/support/create/model.stub');
        $stub = str_replace('ClassName', $name, $stub);
        $stub = str_replace('table_name', $table_name, $stub);
    
        $outputPath = __DIR__ . "/app/Models/{$name}.php";
        if (file_exists($outputPath)) {
            echo "Model already exists.\n";
            exit(1);
        }
    
        file_put_contents($outputPath, $stub);
        echo "Created model: {$name}\n";
        break;
    case 'make:middleware':
        $name = $argv[2] ?? null;
        if (!$name) {
            echo "Type name of the middleware.\n";
            exit(1);
        }
        
        $stub = file_get_contents(__DIR__ . '/support/create/middleware.stub');
        $stub = str_replace('ClassName', $name, $stub);
    
        $outputPath = __DIR__ . "/app/Middleware/{$name}.php";
        if (file_exists($outputPath)) {
            echo "Middleware already exists.\n";
            exit(1);
        }
    
        file_put_contents($outputPath, $stub);
        echo "Created middleware: {$name}\n";
        break;
    case 'make:helper':
        $name = $argv[2] ?? null;
        if (!$name) {
            echo "Type name of the helper.\n";
            exit(1);
        }
        
        $stub = file_get_contents(__DIR__ . '/support/create/helper.stub');
        $stub = str_replace('ClassName', $name, $stub);
    
        $outputPath = __DIR__ . "/app/Helpers/{$name}.php";
        if (file_exists($outputPath)) {
            echo "Helper already exists.\n";
            exit(1);
        }
    
        file_put_contents($outputPath, $stub);
        echo "Created helper: {$name}\n";
        break;
    case 'make:view':
        $name = $argv[2] ?? null;
        if (!$name) {
            echo "Type name of the view.\n";
            exit(1);
        }

        $stub = file_get_contents(__DIR__ . '/support/create/view.stub');
        $stub = str_replace('ViewName', $name, $stub);

        $relativePath = "/resources/views/{$name}.frame.php";
        $outputPath = __DIR__ . $relativePath;

        $dir = dirname($outputPath);
        if (!is_dir($dir)) {
            mkdir($dir, 0777, true);
        }

        if (file_exists($outputPath)) {
            echo "View already exists: $relativePath\n";
            exit(1);
        }

        file_put_contents($outputPath, $stub);
        echo "Created view: $relativePath\n";
        break;
        case 'serve':
            $host = $argv[2] ?? '127.0.0.1';
            $requestedPort = $argv[3] ?? null;
        
            if (!filter_var($host, FILTER_VALIDATE_IP) && !preg_match('/^([a-z0-9\.\-]+)$/i', $host)) {
                echo "Invalid host: {$host}\n";
                exit;
            }
        
            $publicDir = __DIR__ . '/public';
            if (!is_dir($publicDir)) {
                echo "Missing 'public' directory. Please create a 'public/' folder with an index.php file.\n";
                exit;
            }
        
            function findFreePort($host, $startPort = 8000, $maxAttempts = 100) {
                $port = $startPort;
                for ($i = 0; $i < $maxAttempts; $i++, $port++) {
                    $connection = @fsockopen($host, $port);
                    if (is_resource($connection)) {
                        fclose($connection); 
                    } else {
                        return $port; 
                    }
                }
                return false; 
            }
        
            if ($requestedPort === null) {
                $port = findFreePort($host);
                if (!$port) {
                    echo "Could not find a free port starting from 8000.\n";
                    exit;
                }
            } else {
                if (!is_numeric($requestedPort) || $requestedPort < 1 || $requestedPort > 65535) {
                    echo "Invalid port: {$requestedPort}\n";
                    exit;
                }
                $port = (int)$requestedPort;
                $connection = @fsockopen($host, $port);
                if (is_resource($connection)) {
                    fclose($connection);
                    echo "Port {$port} is already in use.\n";
                    exit;
                }
            }
        
            echo "Starting PHP server at http://{$host}:{$port}\n";
            echo "Press Ctrl+C to stop the server\n\n";
        
            $cmd = "php -S {$host}:{$port} -t {$publicDir}";
            passthru($cmd);
            break;
        case 'make:migration':
            $name = $argv[2] ?? null;
            if (!$name) {
                echo "Type name of the migration (e.g. create_users_table).\n";
                exit(1);
            }

            $tableName = strtolower(preg_replace('/^create_|_table$/', '', $name));
            $timestamp = date('Y_m_d_His');
            $fileName = $timestamp . '_' . $name . '.php';

            $stub = file_get_contents(__DIR__ . '/support/create/migration.stub');
            $stub = str_replace('{{table}}', $tableName, $stub);

            $outputPath = __DIR__ . "/database/migrations/{$fileName}";
            if (!is_dir(dirname($outputPath))) {
                mkdir(dirname($outputPath), 0755, true);
            }

            file_put_contents($outputPath, $stub);
            echo "Created migration: {$fileName}\n";
            break;
        case 'migrations:on':
            updateEnvValue('MIGRATIONS_ENABLED', 'true');
            echo "Migrations enabled.\n";
            echo "You can now access the migration panel at /migrations.\n";
            break;
        case 'migrations:off':
            updateEnvValue('MIGRATIONS_ENABLED', 'false');
            echo "Migrations disabled.\n";
            break;
    default:
        echo "unknown command\n";
        echo <<<TEXT

        Available QuickFrame Commands:

        php frame serve                  Start the built-in PHP development server (default: 127.0.0.1:8000)
        php frame serve IP PORT          Start server with custom IP and port (e.g. php frame serve 0.0.0.0 8080)
        php frame migrations:on          Enable migrations (.env MIGRATIONS_ENABLED=true)
        php frame migrations:off         Disable migrations (.env MIGRATIONS_ENABLED=false)

        Generators (make:)

        php frame make:controller Name   Generate a new controller class
        php frame make:model Name        Generate a new model class
        php frame make:helper Name       Generate a new global helper function
        php frame make:view Name         Generate a new view file (Blade-like)
        php frame make:middleware Name   Generate a new middleware class
        php frame make:migration Name    Generate a new migration class

        CLI: frame | Powered by QuickFrame


        TEXT;

        break;
}
function updateEnvValue(string $key, string $value): void
{
    $envPath = __DIR__ . '/.env'; 

    if (!file_exists($envPath)) {
        echo " .env file not found at $envPath\n";
        exit(1);
    }

    $content = file_get_contents($envPath);

    if (preg_match("/^{$key}=.*/m", $content)) {
        $content = preg_replace("/^{$key}=.*/m", "{$key}={$value}", $content);
    } else {
        $content .= PHP_EOL . "{$key}={$value}";
    }

    file_put_contents($envPath, $content);
}